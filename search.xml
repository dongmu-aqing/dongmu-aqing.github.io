<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>前端面试题</title>
      <link href="/2022/11/24/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2022/11/24/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="1，闭包是什么"><a href="#1，闭包是什么" class="headerlink" title="1，闭包是什么"></a>1，闭包是什么</h1><p><code>两个函数（a,b）嵌套，内层函数b 调用了外层函数a中声明的变量，就叫闭包</code></p><h1 id="2，数组中的forEach和map："><a href="#2，数组中的forEach和map：" class="headerlink" title="2，数组中的forEach和map："></a>2，数组中的forEach和map：</h1><h2 id="相同点："><a href="#相同点：" class="headerlink" title="相同点："></a>相同点：</h2><p><code> 都是遍历数组每一项，都有三个参数，都不改变原数组</code></p><h2 id="不同点："><a href="#不同点：" class="headerlink" title="不同点："></a>不同点：</h2><p><code> forEach是将一个数组中的每一项作为回调函数来处理，</code><br><code> map则返回一个新数组，数组中的元素是原数组的方法处理后的值</code></p><h1 id="3，浅拷贝和深拷贝"><a href="#3，浅拷贝和深拷贝" class="headerlink" title="3，浅拷贝和深拷贝"></a>3，浅拷贝和深拷贝</h1><h2 id="浅拷贝："><a href="#浅拷贝：" class="headerlink" title="浅拷贝："></a>浅拷贝：</h2><h3 id="基本数据类型："><a href="#基本数据类型：" class="headerlink" title="基本数据类型："></a>基本数据类型：</h3><p><code>拷贝值，原来的和拷贝的互不影响</code></p><h3 id="引用数据类型："><a href="#引用数据类型：" class="headerlink" title="引用数据类型："></a>引用数据类型：</h3><p><code>拷贝地址，一改变原来的和拷贝的都改变，可以用展开运算符进行浅拷贝</code></p><h2 id="深拷贝："><a href="#深拷贝：" class="headerlink" title="深拷贝："></a>深拷贝：</h2><h3 id="引用数据类型：-1"><a href="#引用数据类型：-1" class="headerlink" title="引用数据类型："></a>引用数据类型：</h3><p><code>内存中开辟新地址，堆中的内容完整拷贝一份到新地址中，修改一个另一个并不受影响</code><br><code>可以用递归的方式进行深拷贝</code></p><h1 id="4，防抖和节流"><a href="#4，防抖和节流" class="headerlink" title="4，防抖和节流"></a>4，防抖和节流</h1><h2 id="防抖："><a href="#防抖：" class="headerlink" title="防抖："></a>防抖：</h2><p><code>连续触发事件，但是在设定的一段时间内只执行最后一次函数</code><br><code>记忆核心：从 新 开始</code><br><code>应用场景：文本编辑器和搜索框</code><br><code>代码实现思路主要靠定时器</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//代码示例</span></span><br><span class="line">   <span class="keyword">let</span> tid=<span class="literal">null</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;获取要操作的元素&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;keyup&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (tid!==<span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="built_in">clearTimeout</span>(tid)</span><br><span class="line">        &#125;</span><br><span class="line">        tid=<span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;防抖&#x27;</span>);</span><br><span class="line">        &#125;,<span class="number">1000</span>)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h2 id="节流："><a href="#节流：" class="headerlink" title="节流："></a>节流：</h2><p><code>连续触发事件但是在设定的一段时间内只执行一次函数</code></p><h3 id="记忆核心：-不要打断我"><a href="#记忆核心：-不要打断我" class="headerlink" title="记忆核心： 不要打断我"></a>记忆核心： <code>不要打断我</code></h3><h3 id="应用场景："><a href="#应用场景：" class="headerlink" title="应用场景："></a>应用场景：</h3><p><code>1，高频事件：快速点击，鼠标滑动，resize事件，scroll事件</code><br><code>2，下拉加载</code><br><code>3，视频播放记录时间等</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 代码示例</span></span><br><span class="line">    <span class="keyword">let</span> tid=<span class="literal">null</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;获取要操作的元素&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;keyup&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (tid!==<span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        tid=<span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;防抖&#x27;</span>);</span><br><span class="line">            tid=<span class="literal">null</span></span><br><span class="line">        &#125;,<span class="number">1000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="comment">//开发一般用lodash库，利用里面的debounce（防抖）和throttle（节流）来做</span></span><br></pre></td></tr></table></figure><h1 id="5，原型和原型链"><a href="#5，原型和原型链" class="headerlink" title="5，原型和原型链"></a>5，原型和原型链</h1><h2 id="原型："><a href="#原型：" class="headerlink" title="原型："></a>原型：</h2><p><code>所有的引用类型都有一个__proto__属性，所有的函数都有一个prototype属性</code><br><code>所有引用类型的__proto__都指向它构造函数的prototype</code></p><h2 id="原型链："><a href="#原型链：" class="headerlink" title="原型链："></a>原型链：</h2><p><code>当访问一个对象的某个属性的时候，先在对象本身查找，</code><br><code>如果没有，就去他的__proto__属性上找</code><br><code>如果还没有，就去__proto__所指向的构造函数的prototype找</code><br><code>还没有就去Object上找，最顶为null，这样的一个链式结构，就叫做原型链</code></p><h1 id="6，thie指向问题"><a href="#6，thie指向问题" class="headerlink" title="6，thie指向问题"></a>6，thie指向问题</h1><p><code>函数调用指向window</code><br><code>方法调用指向对象</code><br><code>构造函数调用指向它的实例对象</code><br><code>箭头函数则看外层有没有函数，有的话和外层函数指向一样，没有指向window</code></p><h1 id="7，call，bind，apply"><a href="#7，call，bind，apply" class="headerlink" title="7，call，bind，apply"></a>7，call，bind，apply</h1><p><code>都是用来改变this指向</code><br><code>第一个参数都是this的新指向</code><br><code>第二个及之后的参数call和bind是直接传入函数值，apply第二个参数则是数组或伪数组</code><br><code>bind方法不会直接执行函数，其他两个会主动执行函数</code></p><h1 id="8，回流和重绘的说明"><a href="#8，回流和重绘的说明" class="headerlink" title="8，回流和重绘的说明"></a>8，回流和重绘的说明</h1><h2 id="回流"><a href="#回流" class="headerlink" title="回流:"></a>回流:</h2><p><code>访问页面的时候浏览器会解析HTML代码并构建DOM树，</code><br><code>然后根据DOM节点进行几何布局生成渲染树，渲染树构建完成后，页面根据DOM节点进行几何布局</code><br><code>渲染树也根据设置的样式渲染这些节点，在这过程中我们删除节点，修改一个元素的宽高，页面布局会发生变化，DOM树就会重新构建</code><br><code>渲染树和DOM树紧密相连，渲染树也会重新渲染，这个过程称为回流或自动重排</code></p><h2 id="重绘："><a href="#重绘：" class="headerlink" title="重绘："></a>重绘：</h2><p><code>由于节点的几何属性发生改变或者由样式发生改变而不影响布局的，叫做重绘</code><br><code>个人简单理解：页面布局发生变化，会引起回流，修改元素样式不改变布局，会引起重绘</code><br><code>注意： 回流一定触发重绘，重绘不一定触发回流</code></p><h1 id="9，new关键字做了哪些事"><a href="#9，new关键字做了哪些事" class="headerlink" title="9，new关键字做了哪些事"></a>9，new关键字做了哪些事</h1><p><code>1，new一个空对象</code><br><code>2，将函数的this指向这个空对象</code><br><code>3，为新创建的对象添加__proto__,指向构造函数的原型对象</code><br><code>4，如果函数返回对象，就把这个对象作为返回值，如果没有返回对象就返回this</code></p><h1 id="10，async和await的理解"><a href="#10，async和await的理解" class="headerlink" title="10，async和await的理解"></a>10，async和await的理解</h1><p><code>1，是异步代码的新方式</code><br><code>2，基于promise实现</code><br><code>3，使异步代码更像同步代码</code><br><code>4，await只能在async中使用，不能在普通函数中使用，成对出现</code><br><code>5，默认返回一个promise实例，不能改变</code><br><code>6，await下面的代码是异步，后面的代码是同步的</code></p><h1 id="11-如何理解promise？"><a href="#11-如何理解promise？" class="headerlink" title="11,如何理解promise？"></a>11,如何理解promise？</h1><p><code>1，异步编程的解决方案，用来解决回调地狱</code><br><code>2,有三种状态：pending（进行中），fufilled（已成功），rejected（已失败）</code><br><code>3，基本用法是new Promise（）传入一个函数，函数里面有两个参数，一个是resolve成功的回调，一个是reject失败的回调</code><br><code>new出来的有三个方法：参数都是一个数组</code><br><code>all:如果数组里面所有的promise都是resolve就进入then方法，有一个reject就进入catch</code><br><code>allSettled：在then方法中返回所有的promise数组结果，不管成功的还是失败的</code><br><code>rece：数组中的promise哪个先返回结果就使用哪个结果</code></p><h1 id="12-对作用域进行说明"><a href="#12-对作用域进行说明" class="headerlink" title="12,对作用域进行说明"></a>12,对作用域进行说明</h1><h2 id="什么是作用域"><a href="#什么是作用域" class="headerlink" title="什么是作用域"></a>什么是作用域</h2><p><code>指变量的有效范围</code></p><h3 id="有三种作用域-分别是："><a href="#有三种作用域-分别是：" class="headerlink" title="有三种作用域 分别是："></a>有三种作用域 分别是：</h3><h2 id="全局作用域：书写在JavaScript标签的变量，任何内部函数都能访问到"><a href="#全局作用域：书写在JavaScript标签的变量，任何内部函数都能访问到" class="headerlink" title="全局作用域：书写在JavaScript标签的变量，任何内部函数都能访问到"></a>全局作用域：书写在JavaScript标签的变量，任何内部函数都能访问到</h2><h2 id="局部作用域（函数作用域）：-在函数内可以访问，函数外部无法访问"><a href="#局部作用域（函数作用域）：-在函数内可以访问，函数外部无法访问" class="headerlink" title="局部作用域（函数作用域）： 在函数内可以访问，函数外部无法访问"></a>局部作用域（函数作用域）： 在函数内可以访问，函数外部无法访问</h2><h2 id="块级作用域（es6新增）：-凡是代码块就可以划分变量的作用域"><a href="#块级作用域（es6新增）：-凡是代码块就可以划分变量的作用域" class="headerlink" title="块级作用域（es6新增）：  凡是代码块就可以划分变量的作用域"></a>块级作用域（es6新增）：  凡是代码块就可以划分变量的作用域</h2><h1 id="13，事件对象和事件委托"><a href="#13，事件对象和事件委托" class="headerlink" title="13，事件对象和事件委托"></a>13，事件对象和事件委托</h1><h2 id="事件对象："><a href="#事件对象：" class="headerlink" title="事件对象："></a>事件对象：</h2><p><code>一个函数或者方法都会带有一个事件对象参数</code><br><code>事件对象.target是获取最先触发的元素</code><br><code>事件对象有两种公共的方法：</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">e.<span class="title function_">preventDefault</span>() <span class="comment">//阻止默认行为</span></span><br><span class="line">e.<span class="title function_">stopPropagation</span>() <span class="comment">//阻止冒泡</span></span><br></pre></td></tr></table></figure><h2 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h2><p><code>可以把事件处理器添加到一个上级元素上，避免把事件处理器添加到多个子元素上，提高性能</code><br><code>还可以预测未来，动态添加的元素仍然可以触发该事件</code><br><code>主要依靠的就是事件冒泡，也就是当一个元素接收到事件的时候，会把他接收到的事件传给自己的父级，一直到window</code></p><h1 id="14，js事件循环机制中，使用得三种数据对象"><a href="#14，js事件循环机制中，使用得三种数据对象" class="headerlink" title="14，js事件循环机制中，使用得三种数据对象"></a>14，js事件循环机制中，使用得三种数据对象</h1><h2 id="栈：后进先出的数据结构"><a href="#栈：后进先出的数据结构" class="headerlink" title="栈：后进先出的数据结构"></a>栈：后进先出的数据结构</h2><h2 id="堆：树状的数据结构"><a href="#堆：树状的数据结构" class="headerlink" title="堆：树状的数据结构"></a>堆：树状的数据结构</h2><h2 id="队列：先进先出的数据结构"><a href="#队列：先进先出的数据结构" class="headerlink" title="队列：先进先出的数据结构"></a>队列：先进先出的数据结构</h2><h3 id="过程：当所有的同步任务都在主线程上执行就形成一个执行栈，当主线程的执行栈为空时，检查事件队列是否为空"><a href="#过程：当所有的同步任务都在主线程上执行就形成一个执行栈，当主线程的执行栈为空时，检查事件队列是否为空" class="headerlink" title="过程：当所有的同步任务都在主线程上执行就形成一个执行栈，当主线程的执行栈为空时，检查事件队列是否为空"></a>过程：当所有的同步任务都在主线程上执行就形成一个执行栈，当主线程的执行栈为空时，检查事件队列是否为空</h3><h3 id="如果为空则继续检查，如果不为空则取出队列任务的首部，加入执行栈，执行任务，如此循环称为事件循环"><a href="#如果为空则继续检查，如果不为空则取出队列任务的首部，加入执行栈，执行任务，如此循环称为事件循环" class="headerlink" title="如果为空则继续检查，如果不为空则取出队列任务的首部，加入执行栈，执行任务，如此循环称为事件循环"></a>如果为空则继续检查，如果不为空则取出队列任务的首部，加入执行栈，执行任务，如此循环称为事件循环</h3><h1 id="15，对rem和em经行说明"><a href="#15，对rem和em经行说明" class="headerlink" title="15，对rem和em经行说明"></a>15，对rem和em经行说明</h1><h2 id="em"><a href="#em" class="headerlink" title="em:"></a>em:</h2><p><code>子元素字体大小的em是相对于父元素字体大小</code><br><code>元素的width/height/hadding/margin用em的话是相对于该元素的font-size</code></p><h2 id="rem："><a href="#rem：" class="headerlink" title="rem："></a>rem：</h2><p><code>rem是相对长度单位，相对于根元素（即html元素）font-size</code><br><code>计算值的倍数的一个css单位</code><br>[参考] (<a href="https://zhuanlan.zhihu.com/p/94369298">https://zhuanlan.zhihu.com/p/94369298</a>)</p>]]></content>
      
      
      <categories>
          
          <category> -前端面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -前端面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ajax</title>
      <link href="/2022/11/23/Ajax/"/>
      <url>/2022/11/23/Ajax/</url>
      
        <content type="html"><![CDATA[<h2 id="Aajx"><a href="#Aajx" class="headerlink" title="Aajx"></a>Aajx</h2>]]></content>
      
      
      <categories>
          
          <category> -Ajax </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -ajax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jsapi</title>
      <link href="/2022/11/23/jsapi/"/>
      <url>/2022/11/23/jsapi/</url>
      
        <content type="html"><![CDATA[<blockquote><h1 id="1，API的介绍"><a href="#1，API的介绍" class="headerlink" title="1，API的介绍"></a><code>1，API的介绍</code></h1><p><strong>API分为：BOM  DOM</strong></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DOM:用来操作页面，主要操作页面元素</span><br><span class="line"></span><br><span class="line">DOM对象：浏览器会将html结构生成dom树，同时生成对应的dom对象，我们的任务就获取这些dom对象， 然后进行相应的操作</span><br><span class="line">BOM:用来操作浏览器</span><br></pre></td></tr></table></figure><hr><blockquote><h1 id="DOM"><a href="#DOM" class="headerlink" title="DOM:"></a>DOM:</h1></blockquote><h1 id="1-获取元素"><a href="#1-获取元素" class="headerlink" title="1,获取元素:"></a><code>1,获取元素</code>:</h1><h2 id="document-querySelector-‘选择器’"><a href="#document-querySelector-‘选择器’" class="headerlink" title="document.querySelector(‘选择器’)"></a>document.querySelector(‘选择器’)</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">获取满足条件的第一个元素，最多只能获取到一个</span><br><span class="line">可以通过:  </span><br><span class="line">id选择器，标签选择器，类选择器，伪类选择，属性选择器来获取</span><br><span class="line"></span><br><span class="line">特性：</span><br><span class="line">获取到的是dom元素，可以直接进行dom操作  如果获取失败，则返回null</span><br></pre></td></tr></table></figure><h2 id="document-querySelectorAll-‘选择器’"><a href="#document-querySelectorAll-‘选择器’" class="headerlink" title="document.querySelectorAll(‘选择器’)"></a>document.querySelectorAll(‘选择器’)</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">    获取满足条件的所有元素，返回一个nodeList伪数组</span><br><span class="line">特性：</span><br><span class="line">    伪数组不能直接进行dom操作，我们需要遍历获取到里面的dom元素再进行操作</span><br><span class="line">    如果获取失败，也会返回一个空的nodeList伪数组</span><br></pre></td></tr></table></figure><h2 id="二者的区别"><a href="#二者的区别" class="headerlink" title="二者的区别:"></a>二者的区别:</h2><ol><li>querySelector只能取到一个，querySelectorAll可以获取满足条件的所有元素</li><li>querySelector返回一个dom元素，可以直接操作，querySelectorAll返回一个伪数组，需要遍历之后 再进行操作</li><li>querySelector如果没有获取到则返回null,querySelectorAll如果没有取到返回一个空的伪数组</li></ol><p><code>拓展：</code><br><code>以前获取元素的方式：</code></p><ol><li><p>根据id获取元素<br><code>document.getElementById(&quot;id属性的值&quot;);</code></p></li><li><p>根据标签名字获取元素<br><code>document.getElementsByTagName(&quot;标签的名字&quot;);</code></p></li><li><p>根据name属性的值获取元素<br><code>document.getElementsByName(&quot;name属性的值&quot;);</code></p></li><li><p>根据类样式的名字获取元素<br><code>document.getElementsByClassName(&quot;类样式的名字&quot;);</code></p></li></ol><hr><h1 id="2-为元素设置内容"><a href="#2-为元素设置内容" class="headerlink" title="2,为元素设置内容"></a><code>2,为元素设置内容</code></h1><div class="tabs" id="为元素设置内容"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#为元素设置内容-1">[innerText]</button></li><li class="tab"><button type="button" data-href="#为元素设置内容-2">[innerHTML]</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="为元素设置内容-1"><h2 id="innerText"><a href="#innerText" class="headerlink" title="innerText"></a>innerText</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">覆盖标签的原始内容</span><br><span class="line">特性：不会解析标签</span><br><span class="line">innerText:只会获取文本内容</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="为元素设置内容-2"><h2 id="innerHTML"><a href="#innerHTML" class="headerlink" title="innerHTML"></a>innerHTML</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">覆盖标签的原始内容</span><br><span class="line">特性：会解析标签</span><br><span class="line">inenrHTML会获取完整的html结构</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p><code>个人建议，尽量使用inenrHTML</code></p><hr><h1 id="3-操作元素属性"><a href="#3-操作元素属性" class="headerlink" title="3,操作元素属性"></a><code>3,操作元素属性</code></h1><h2 id="什么是属性："><a href="#什么是属性：" class="headerlink" title="什么是属性："></a>什么是属性：</h2><p><code>写在标签&lt;&gt;里面的都是属性</code></p><h3 id="书写语法为："><a href="#书写语法为：" class="headerlink" title="书写语法为："></a>书写语法为：</h3><p><code>元素.属性 = &#39;值&#39;</code><br><code>常规属性操作有：img.src = &#39;路径&#39;</code></p><div class="tabs" id="为元素设置内容"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#为元素设置内容-1">[操作行内样式]</button></li><li class="tab"><button type="button" data-href="#为元素设置内容-2">[操作样式类名className]</button></li><li class="tab"><button type="button" data-href="#为元素设置内容-3">[操作样式列表classList]</button></li><li class="tab"><button type="button" data-href="#为元素设置内容-4">[表单元素的属性操作]</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="为元素设置内容-1"><h2 id="操作行内样式"><a href="#操作行内样式" class="headerlink" title="操作行内样式"></a>操作行内样式</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">语法为：    元素.style.样式属性名称=‘值’</span><br><span class="line">单位：      之前如何设置样式，现在也一样</span><br><span class="line">缺点为：    麻烦且无法复用</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="为元素设置内容-2"><h2 id="操作样式类名className"><a href="#操作样式类名className" class="headerlink" title="操作样式类名className"></a>操作样式类名className</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">语法为：    元素.className=&#x27;样式类名&#x27;</span><br><span class="line">作用：      可以为元素指定样式类名</span><br><span class="line">特性是：    会覆盖元素之前的类样式</span><br><span class="line">使用场景是：你能确定只有一个类名样式</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="为元素设置内容-3"><h2 id="操作样式列表classList"><a href="#操作样式列表classList" class="headerlink" title="操作样式列表classList"></a>操作样式列表classList</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">特点：在不影响元素之前的样式的基础上，对元素的样式进行操作</span><br><span class="line">方法有：addremove togglecontains</span><br></pre></td></tr></table></figure><p><strong>add</strong><br><code>语法：元素.classList.add(&#39;样式1&#39;,&#39;样式2&#39;.....)</code><br><code>作用：可以为元素添加新的样式</code></p><p><strong>remove</strong><br><code>语法：元素.classList.remove(&#39;样式1&#39;,&#39;样式2&#39;.....)</code><br><code>作用：可以为元素移除样式</code></p><p><strong>toggle</strong><br><code>语法 ：元素.classList.toggle(&#39;样式&#39;)</code><br><code>作用：可以为元素切换样式  注意：如果元素有这个样式，则为移除，如果没有这个样式则为添加</code></p><p><strong>contains</strong><br><code>语法：元素.classList.contains(&#39;样式&#39;)</code><br><code>作用：判断元素是否拥有指定名称的样式如果有则返回 true否则返回false</code><br><code>使用场景为：使用场景：事件委托</code></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="为元素设置内容-4"><h2 id="表单元素的属性操作"><a href="#表单元素的属性操作" class="headerlink" title="表单元素的属性操作"></a>表单元素的属性操作</h2><p><strong>常规属性操作：</strong></p><p><code>元素.属性： 获取值</code><br><code>元素.属性=‘值’ ：设置值</code></p><p><strong>状态属性的操作：</strong><br><code>checked,disabled,selected都是状态值</code><br><code>元素.属性： 获取值</code><br><code>元素.属性=true/false ：设置值    注意：true代表添加了这个状态fasle代表移除了这个状态</code></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><h1 id="4-定时器"><a href="#4-定时器" class="headerlink" title="4,定时器"></a><code>4,定时器</code></h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">作用：每隔一段时间重复做某个事件</span><br><span class="line">开启语法：</span><br><span class="line"><span class="built_in">setInterval</span>()需要执行的函数，间隔时间）</span><br><span class="line">注：时间以毫秒做为单位</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">关闭语法：</span><br><span class="line">接收标识 <span class="keyword">let</span> timeId = <span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params"></span>),<span class="number">1000</span>)</span><br><span class="line"><span class="built_in">clearInterval</span>(标识)</span><br></pre></td></tr></table></figure><p><code>简单理解：声明一个变量 值为 你要清除的定时器，</code><br><code>清除时使用语法clearInterval() 括号内填你要清除的定时器的变量名（一般我们命名为timeId）</code></p><p><code>拓展：clearInterval(标识)   标识我们一般叫做</code><strong>句柄</strong></p><hr><h1 id="5-事件基础"><a href="#5-事件基础" class="headerlink" title="5,事件基础"></a><code>5,事件基础</code></h1><h2 id="为元素绑定事件"><a href="#为元素绑定事件" class="headerlink" title="为元素绑定事件"></a>为元素绑定事件</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">语法：元素.<span class="title function_">addEventListener</span>(<span class="string">&#x27;事件类型&#x27;</span>,处理函数 )</span><br><span class="line"></span><br><span class="line">原理：事件监听机制来监听用户是否触发了事件，如果有触发就调用传入的函数进行处理</span><br><span class="line"></span><br><span class="line">提供者：处理函数是开发者来提供的</span><br><span class="line"></span><br><span class="line">一种事件类型  对应着 某一种操作</span><br></pre></td></tr></table></figure><h2 id="常用事件类型"><a href="#常用事件类型" class="headerlink" title="常用事件类型"></a>常用事件类型</h2><h3 id="鼠标事件"><a href="#鼠标事件" class="headerlink" title="鼠标事件:"></a>鼠标事件:</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">单击：click</span><br><span class="line">鼠标进入：mouseenter</span><br><span class="line">鼠标离开：mouseleave</span><br></pre></td></tr></table></figure><p><code>常见的鼠标事件:</code><br><img src="/../img/mouse.png" alt="鼠标事件"><br><img src="/../img/moouse2.png" alt="鼠标事件"></p><h3 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h3><p><strong><code>keydown:键盘按下</code></strong><br><strong><code>keyup:按键松开</code></strong></p><p><img src="/../img/keyboard.png" alt="键盘事件"><br><img src="/../img/keyboard2.png" alt="键盘事件"></p><h3 id="焦点事件"><a href="#焦点事件" class="headerlink" title="焦点事件"></a>焦点事件</h3><p><strong><code>focus:获取焦点</code></strong><br><strong><code>blur:失去焦点</code></strong></p><h3 id="输入框事件"><a href="#输入框事件" class="headerlink" title="输入框事件"></a>输入框事件</h3><p><strong><code>input:内容改变事件，只要内容改变就会触发</code></strong></p><p><strong>change:</strong><br><code>用于file文件域，当用户选择好文件时触发</code><br><code>还可以用于下拉列表的选项切换</code><br><code>用于输入框，失去焦点的同时，内容改变才会触发</code></p><h3 id="加载事件"><a href="#加载事件" class="headerlink" title="加载事件"></a>加载事件</h3><p><strong><code>load一张页面或一幅图像完成加载。</code></strong></p><h3 id="选择和改变"><a href="#选择和改变" class="headerlink" title="选择和改变"></a>选择和改变</h3><p><strong><code>select 文本被选中。</code></strong></p><h3 id="表单事件"><a href="#表单事件" class="headerlink" title="表单事件"></a>表单事件</h3><p><strong><code>submit 确认按钮被点击。</code></strong><br><strong><code>reset 重置按钮被点击。</code></strong></p><p><strong><code>拓展：</code></strong><br><code>以前事件类型基本前面要加on</code><br><code>比如：onclick   onload  onfocus...等等  </code><br><code>原因是：添加事件类型的语法不一样</code></p><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><p><strong><code>概念：某些组件被执行了某些操作后，触发某些代码的执行。</code></strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">事件：某些操作。如： 单击，双击，键盘按下了，鼠标移动了</span><br><span class="line">事件源：组件。如： 按钮 文本输入框…</span><br><span class="line">监听器：代码。</span><br><span class="line">注册监听：将事件，事件源，监听器结合在一起。 当事件源上发生了某个事件，则触发执行某个监听器代码。</span><br></pre></td></tr></table></figure><p><strong><code>事件三要素：事件源  事件类型 事件处理函数  </code></strong></p><h2 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">JavaScript的函数其实都指向某个变量。 </span><br><span class="line">既然变量可以指向函数，函数的参数能接收变量，</span><br><span class="line">那么一个函数就可以接收另一个函数作为参数</span><br><span class="line">这种函数就称之为高阶函数。</span><br><span class="line"> 编写高阶函数，就是让函数的参数能够接收别的函数。</span><br></pre></td></tr></table></figure><p><code>简单理解：</code><br><code>简单说就是指函数的高级运用，这一阶段主要是指  将函数做为参数传递--回调函数</code></p><p><strong><code>回调函数是什么：调用函数A，将函数B做为参数传递，函数B就称回调函数</code></strong></p><p><code>给谁用的：回调函数是我们开发者准备的</code><br><code>注意：回调函数不是我们自己调用的</code></p><h2 id="环境变量this"><a href="#环境变量this" class="headerlink" title="环境变量this"></a>环境变量this</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">指函数中的<span class="variable language_">this</span></span><br><span class="line">哪个元素触发了事件，这个元素就是事件处理函数中的<span class="variable language_">this</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>指向：</span><br><span class="line">全局中，<span class="variable language_">this</span>指向<span class="variable language_">window</span></span><br><span class="line"></span><br><span class="line">在普通函数中：</span><br><span class="line"><span class="variable language_">this</span>指向<span class="variable language_">window</span></span><br><span class="line"></span><br><span class="line">在箭头函数中</span><br><span class="line">箭头函数没有自己的<span class="variable language_">this</span>，箭头函数的<span class="variable language_">this</span>就是上下文中定义的<span class="variable language_">this</span>，因为箭头函数没有自己的<span class="variable language_">this</span>所以不能用做构造函数。</span><br><span class="line"></span><br><span class="line">事件绑定的<span class="variable language_">this</span>：</span><br><span class="line"><span class="variable language_">this</span>指向事件源</span><br><span class="line">事件源.<span class="title function_">addEventListener</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123; &#125;) <span class="comment">//this-&gt;事件源</span></span><br><span class="line"></span><br><span class="line">定时器中的<span class="variable language_">this</span>：</span><br><span class="line">定时器中的<span class="variable language_">this</span>-&gt;<span class="variable language_">window</span>，因为定时器中采用回调函数作为处理函数，而回调函数的<span class="variable language_">this</span>-&gt;<span class="variable language_">window</span></span><br><span class="line"></span><br><span class="line">构造函数中的<span class="variable language_">this</span>：</span><br><span class="line">指向实例化对象</span><br><span class="line">构造函数配合<span class="keyword">new</span>使用, 而<span class="keyword">new</span>关键字会将构造函数中的<span class="variable language_">this</span>指向实例化对象，所以构造函数中的<span class="variable language_">this</span>-&gt;实例化对象</span><br></pre></td></tr></table></figure><h2 id="排他思想"><a href="#排他思想" class="headerlink" title="排他思想"></a>排他思想</h2><p><strong><code>清除其它元素的效果，为当前元素添加效果</code></strong><br><code>简单理解：干掉所有人包括自己，随后复活自己</code><br><code>(一般来讲需要清除的指定样式只有一个元素有，然后我们找到并清除掉它，随后给自己添加上即可)</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">应用场景：导航栏的样式切换</span><br><span class="line">代码实现步骤:</span><br><span class="line">方法1：循环遍历 清除所有元素的样式，再为当前元素添加样式</span><br><span class="line">方法2：只找到有指定样式的元素清除样式，再为当前元素添加样式</span><br><span class="line">我们一般使用方法2</span><br></pre></td></tr></table></figure><hr><h1 id="6-节点操作"><a href="#6-节点操作" class="headerlink" title="6,节点操作"></a><code>6,节点操作</code></h1><p><code>节点分类：文本节点，注释节点，元素节点...</code><br><code>我们只关注元素节点哦</code></p><div class="tabs" id="节点操作"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#节点操作-1">[获取节点]</button></li><li class="tab"><button type="button" data-href="#节点操作-2">[创建节点]</button></li><li class="tab"><button type="button" data-href="#节点操作-3">[新增节点]</button></li><li class="tab"><button type="button" data-href="#节点操作-4">[删除节点]</button></li><li class="tab"><button type="button" data-href="#节点操作-5">[克隆节点：]</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="节点操作-1"><h2 id="获取节点"><a href="#获取节点" class="headerlink" title="获取节点"></a>获取节点</h2><p><strong><code>元素的关系：</code></strong><br>A嵌套B，A就是父容器，B就是子元素<br>所以构成了三种关系：父子关系，子父关系，兄弟关系</p><p>子找父的方法：<br><code>*parentNode*</code>可以查找到当前节点的最近一级的父节点<br>如果找到则返回一个dom元素，找不到则返回null</p><p>父找子的方法：<br><strong><code>childNodes：</code></strong><br>获取所有类型的子节点，包含  注释，文本。。。<br>children只会获取元素节点，我们主要用它来父找子  因为我们只会关注元素节点</p><p>找兄弟节点的方法：<br><strong><code>nextElementSibling 下一个兄弟元素    如果没有则返回null</code></strong><br><strong><code>previousElementSibling上一个兄弟元素如果没有则返回null</code></strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="节点操作-2"><h2 id="创建节点"><a href="#创建节点" class="headerlink" title="创建节点"></a>创建节点</h2><p><strong><code>语法：document.createElement(&#39;标签名称&#39;)</code></strong><br><code>返回创建好的元素 </code><br><code>注意：只有元素本身，没有属性和内容，需要得自己添加</code></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="节点操作-3"><h2 id="新增节点"><a href="#新增节点" class="headerlink" title="新增节点"></a>新增节点</h2><p><code>添加做父子：</code><br><strong><code>做为最后一个子元素：语法：父容器.appendChild(子元素)</code></strong><br><code>放到某个子元素的前面</code></p><p><strong><code>父容器.insertBefore(需要添加的子元素，参照元素)</code></strong><br><code>如果没有找到参照元素，则默认为appendChild（做为最后一个子元素）</code><br><code>insertBefore：但是两个参数不能少</code></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="节点操作-4"><h2 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h2><p><code>通过父容器删除直接子元素(不能删除间接的后代元素)--必须是父子关系</code><br><strong><code>父容器.removeChild(直接子元素)</code></strong></p><p><strong><code>删除元素本身 ：元素.remove()</code></strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="节点操作-5"><h2 id="克隆节点："><a href="#克隆节点：" class="headerlink" title="克隆节点："></a>克隆节点：</h2><p><code>作用就是将节点进行复制</code><br><strong><code>cloneNode(false):浅拷贝，只拷贝结构</code></strong><br><strong><code>cloneNode(true):深拷贝，拷贝结构和内容</code></strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><h1 id="7，日期对象"><a href="#7，日期对象" class="headerlink" title="7，日期对象"></a><code>7，日期对象</code></h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Date类型</span><br><span class="line">日期构造函数</span><br><span class="line">获取当前系统的日期：new Date()</span><br><span class="line">获取指定日期：本质是就是将字符串转换为日期类型的 对象</span><br></pre></td></tr></table></figure><p><img src="/../img/date.png" alt="日期对象"></p><h2 id="时间戳："><a href="#时间戳：" class="headerlink" title="时间戳："></a>时间戳：</h2><p>概念：两个日期之间的毫秒差异，默认是以1970-1-1 00:00:00为参考标准<br>应用场景：实现倒计时的效果<br>如何获取：三种方式：</p><div class="tabs" id="三种方式"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#三种方式-1">[new Date().getTime()]</button></li><li class="tab"><button type="button" data-href="#三种方式-2">[+new Date()]</button></li><li class="tab"><button type="button" data-href="#三种方式-3">[Date.now()]</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="三种方式-1"><p><strong>1，new Date().getTime()</strong><br><code>注意事项：需要创建对象</code><br><code>作用：可以指定任意的时间</code></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="三种方式-2"><p><strong>2，+new Date()（推荐）</strong><br><code>注意事项：需要创建对象</code><br><code>作用：可以指定任意的时间</code></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="三种方式-3"><p><strong>3，Date.now()</strong><br><code>不需要创建对象   但也不能指定任意的时间</code></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="8-事件高级"><a href="#8-事件高级" class="headerlink" title="8,事件高级"></a><code>8,事件高级</code></h1><div class="tabs" id="unique-name"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#unique-name-1">[事件对象]</button></li><li class="tab"><button type="button" data-href="#unique-name-2">[事件流]</button></li><li class="tab"><button type="button" data-href="#unique-name-3">[事件冒泡]</button></li><li class="tab"><button type="button" data-href="#unique-name-4">[事件委托]</button></li><li class="tab"><button type="button" data-href="#unique-name-5">[重点细节]</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="unique-name-1"><h2 id="事件对象："><a href="#事件对象：" class="headerlink" title="事件对象："></a>事件对象：</h2><p><code>理解：就是一个对象，里面包含着与当前事件相关的信息</code></p><p><code>如何获取事件对象：事件处理函数的第一个参数就是事件对象</code></p><p><code>常用属性：事件类型不一样，属性成员不一样</code></p><p><code>一般我们用在鼠标事件和键盘事件中</code></p><p><code>真正触发事件的对象是:   e.target</code></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="unique-name-2"><h2 id="事件流"><a href="#事件流" class="headerlink" title="事件流"></a>事件流</h2><p><code>理解：触发事件时的事件流向</code><br><code>事件捕获：从外到内，从上到下，从父到子</code></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="unique-name-3"><p><strong>事件冒泡：</strong></p><p><code>从内到外，从下到上，从子到父</code><br><code>子元素触发事件之后，还会将事件冒泡给父容器</code><br><code>如果父容器添加了同名事件，父容器的事件也会触发</code></p><p><strong>阻止事件传播：e.stopPropagation()</strong><br><code>注意：既可以阻止捕获也可以阻止冒泡</code></p><p><strong>阻止默认行为：e.preventDefault()</strong><br><code>使用场景：阻止超链接的跳转阻止表单元素csubmit的默认提交行为</code></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="unique-name-4"><h2 id="事件委托："><a href="#事件委托：" class="headerlink" title="事件委托："></a>事件委托：</h2><p><code>表现形式：将事件绑定给已存在的父容器，每一个子元素都能触发</code><br><strong><code>原理：是利用了事件冒泡的原理：子元素触发事件，也会将事件冒泡给父容器</code></strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="unique-name-5"><h2 id="重点细节："><a href="#重点细节：" class="headerlink" title="重点细节："></a>重点细节：</h2><p><strong><code>事件绑定给父容器</code></strong></p><p>通过e.target获取真正触发事件的元素<br>一般情况下，需要判断是否有需要的元素才进行相应的业务处理：<br><strong><code>localName判断元素类型</code></strong><br><strong><code>className判断样式（只有一个类名时使用）</code></strong><br><strong><code>classList.contains判断是否包含某个样式标识</code></strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><h1 id="9-数据驱动视图"><a href="#9-数据驱动视图" class="headerlink" title="9,数据驱动视图"></a><code>9,数据驱动视图</code></h1><p><code>页面中的元素操作本质上是数据操作</code><br><code>页面操作的结果一定要体现到数据</code></p><p><strong><code>称为：数据驱动视图，双向数据绑定</code></strong><br><code>这里我们还没学axios所以数据都是自己模拟</code></p><div class="tabs" id="数据增删改查"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#数据增删改查-1">[渲染]</button></li><li class="tab"><button type="button" data-href="#数据增删改查-2">[删除]</button></li><li class="tab"><button type="button" data-href="#数据增删改查-3">[添加]</button></li><li class="tab"><button type="button" data-href="#数据增删改查-4">[查询]</button></li><li class="tab"><button type="button" data-href="#数据增删改查-5">[修改]</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="数据增删改查-1"><h2 id="渲染："><a href="#渲染：" class="headerlink" title="渲染："></a>渲染：</h2><p><code>说到渲染，必须有数据和静态结构，如果没有数据，则自行模拟</code><br><code>数据一定要有id   这是他的唯一标识</code><br><code>数据属性成员一一定要能够支持页面的业务处理</code><br><code>数据没有特别意外一般就是  对象数组</code><br><code>数组的每一个成员都是对象</code><br><code>一个对象对应着一行数据</code></p><p><strong><code>实现步骤：</code></strong></p><ol><li><code>先静态后动态，准备好数据和静态结构，</code></li><li><code>遍历拼接，获取动态的网页结构，将结构赋值给指定的容器</code></li><li><code>（页面一般需要多次渲染，所以我们一般会考虑封装为一个函数）</code></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="数据增删改查-2"><h2 id="删除："><a href="#删除：" class="headerlink" title="删除："></a>删除：</h2><ol><li><p><code>使用委托方式为删除按钮绑定事件</code><br><code>事件绑定给当前元素的最近一级已存在的父容器</code><br><code>判断是否是单击了 删除按钮</code><br><code>e.target获取当前真正触发事件的元素</code><br><code>使用className或者classList.contains判断是否有某个标识</code></p></li><li><p><code>使用filter方法删除数据</code><br><code>使用数组调用filter方法</code><br><code>删除的数据标识是数据id（渲染时添加的id）</code><br><strong><code>filter方法：</code></strong><br><code>它不会修改在原数组，所以我们需要对数组进行覆盖</code><br><code>方法不会修改原数组     会返回一个新数组</code></p></li><li><p><code>重新渲染</code><br><code>当你需要一些值进行某个业务处理的时候，你的实现方式有两种：</code></p></li><li><p><code>先存再取：</code><br><code>存什么？   存储id</code><br><code>存哪里   ？存储到删除按钮中，</code><br><code>添加一个内置属性每一行数据都有一个删除按钮，里面就是存储这一行所对应的数据的id</code><br><code>什么地方需要使用：删除事件处函数中使用</code><br><code>如何获取？通过e.target值获取删除按钮，获取之前存储的内置属性id</code></p></li><li><p><code>参数传递</code></p></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="数据增删改查-3"><h2 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h2><p><code>1，收集数据，生成合适的数据对象</code><br><code>原数据有什么属性，新数据也要有这些属性,</code><br><code>2，准备数据id</code><br><code>定义一个全局变量id =不重复的值</code><br><code>每次新增+1</code><br><code>3，将数据添加到数组,</code><br><code>4，重新渲染</code></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="数据增删改查-4"><h2 id="查询："><a href="#查询：" class="headerlink" title="查询："></a>查询：</h2><ol><li><code>获取查询按钮元素，拿到输入查询参数的元素给查询按钮绑定事件,（事件委托）</code></li><li><code>拿到输入查询参数的元素的value值（指输入的内容，一般是.value的方式获取）</code></li><li><code>声明一个空数组来接收下步操作的值（结果）</code></li><li><code>filter方法遍历源数组，将要查询的参数和原数组做比较，返回能匹配上的，将值给上面我们声明的空数组</code></li><li><code>重新渲染</code></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="数据增删改查-5"><h2 id="修改："><a href="#修改：" class="headerlink" title="修改："></a>修改：</h2><ol><li><code>获取修改按钮给它绑定事件（修改按钮一般我们会给id）（事件委托）</code><br><code>弹出模态框（一般都会有）</code></li><li><code>将点击的修改按钮那一行数据填写在弹出模态框内的对应行</code><br>进行修改</li><li><code>给确认按钮绑定事件</code><br><code>将模态框内对应行的值赋值给修改按钮的对应数据行</code></li><li><code>重新渲染</code></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><h1 id="10-网页特效"><a href="#10-网页特效" class="headerlink" title="10, 网页特效"></a><code>10, 网页特效</code></h1><h2 id="滚动事件"><a href="#滚动事件" class="headerlink" title="滚动事件"></a>滚动事件</h2><p><code>作用：监听页面或元素的滚动</code><br><code>可以添加给页面 window.add...    document.add....</code><br><code>可以添加给元素</code><br><code>滚动的前提：内容有足够的宽或高以产生滚动条</code><br><strong><code>事件类型：scroll</code></strong></p><h2 id="加载事件-1"><a href="#加载事件-1" class="headerlink" title="加载事件"></a>加载事件</h2><p><code>作用：监听页面的资源或者元素内容是否加载完毕，以便在进行操作的时候，有相应的资源</code><br><strong><code>事件类型：load</code></strong><br><code>页面dom及所有外部资源都加载完毕才触发</code></p><p><code>DOMContentLoaded（了解）</code><br><code>当dom结构解析完毕之后就会触发</code><br><code>它会在load之前触发</code><br><code>结论：建议大家将代码写到load事件中，保证代码是在资源加载完毕的情况下运行</code></p><div class="tabs" id="家族"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#家族-1">[offset家族]</button></li><li class="tab"><button type="button" data-href="#家族-2">[offset家族]</button></li><li class="tab"><button type="button" data-href="#家族-3">[client家族]</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="家族-1"><h3 id="scroll家族"><a href="#scroll家族" class="headerlink" title="scroll家族"></a>scroll家族</h3><p><code>获取宽高：内容宽度： 内容 + padding</code><br><code>获取位置：获取页面滚动出屏幕的距离，主要是关注垂直方向上的距离</code></p><p><strong><code>scrollTop:可以获取垂直方向页面滚动出屏幕的距离</code></strong><br><code>可以取值</code><br><code>也可以赋值，用来实现回到顶部的功能</code><br><code>通过document.documentElement进行操作</code></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="家族-2"><h3 id="offset家族"><a href="#offset家族" class="headerlink" title="offset家族"></a>offset家族</h3><p><code>获取宽高：内容宽度： 内容 + padding + border</code><br><code>获取位置：获取子元素相对于定位父级元素的距离</code><br><strong>offsetLeft</strong><br><strong>offsetTop</strong><br><code>元素离文档顶部的距离</code><br><code>细节：如果没有定位父容器，则参照文档左上角</code></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="家族-3"><h3 id="client家族"><a href="#client家族" class="headerlink" title="client家族"></a>client家族</h3><p><code>获取宽高：内容宽度： 内容 + padding（不包含边框，也不包含滚动条）</code><br><code>获取位置：</code><br><strong><code>clientLeft:获取左边框的宽度</code></strong><br><strong><code>clientTop:获取上边框的宽度</code></strong><br><code>window.getCompoutedStyle(元素,null)获取元素的所有样式</code></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="resize事件"><a href="#resize事件" class="headerlink" title="resize事件"></a>resize事件</h2><p><code>监听屏幕大小的变化 ，当屏幕的大小变化的时候，发自动的触发</code><br><code>事件添加给window</code></p><hr><blockquote><h1 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h1></blockquote><h1 id="1-window对象"><a href="#1-window对象" class="headerlink" title="1,window对象"></a><code>1,window对象</code></h1><h2 id="document-网页内容入口"><a href="#document-网页内容入口" class="headerlink" title="document 网页内容入口"></a>document 网页内容入口</h2><div class="tabs" id="location"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#location-1">[location]</button></li><li class="tab"><button type="button" data-href="#location-2">[location.search]</button></li><li class="tab"><button type="button" data-href="#location-3">[location.search]</button></li><li class="tab"><button type="button" data-href="#location-4">[locaction.reload()]</button></li><li class="tab"><button type="button" data-href="#location-5">[location.hash]</button></li><li class="tab"><button type="button" data-href="#location-6">[history]</button></li><li class="tab"><button type="button" data-href="#location-7">[navgator]</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="location-1"><p><strong><code>location</code></strong><br><code>实现页面跳转，并传递参数，还可以实现参数的接收</code></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="location-2"><p><strong><code>location.href：</code></strong><br>没有赋值就是取值，<br>赋值正确的地址就可以实现跳转，<br>跳转的路径可以是  绝对路径也可以是相对路径</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="location-3"><p><strong><code>location.search</code></strong></p><p>查询字符串，?及后面的内容都是查询字符串</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="location-4"><p><strong><code>locaction.reload()</code></strong></p><p>实现页面的刷新–重新加载页面<br>传入参数true代表强制刷新</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="location-5"><p><strong><code>location.hash</code></strong><br>使用hash模式，会在地址前添加#<br>主要是后期vue中使用</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="location-6"><p><strong><code>history</code></strong><br>前进后退：<br>history.back():后退<br>history.go(-1):后退<br>history.go(1):前进一步.<br>history..forward()</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="location-7"><p><strong><code>navgator</code></strong><br>可以检测当前终端的浏览器版本和平台，以便可以跳转到对应的页面</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><h1 id="2-延迟器"><a href="#2-延迟器" class="headerlink" title="2,延迟器"></a><code>2,延迟器</code></h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">作用：使操作延迟执行</span><br><span class="line">特点：延迟，且只执行一次呀</span><br><span class="line">开启延迟器：let tid = setTimeout(function()&#123;&#125;,延迟时间)</span><br><span class="line">清除延迟器：clearTimeout(tid)</span><br><span class="line">后期使用场景：延迟操作，看清楚效果，模拟异步</span><br></pre></td></tr></table></figure><hr><h1 id="3-执行机制-面试"><a href="#3-执行机制-面试" class="headerlink" title="3,执行机制--面试"></a><code>3,执行机制--面试</code></h1><p><code>js是单线程的，一个时间只能做一个事情，操作需要排队，这很容易造成阻塞</code><br><code>为了解决阻塞的问题，允许创建异步线程，这样可以同时处理多个任务</code></p><p><strong><code>任务分为同步任务，异步任务</code></strong></p><p><strong><code>同步任务：任务优先执行，任务被添加到执行栈中，排队执行</code></strong></p><p><strong><code>异步任务：添加到任务队列中排队执行，先做完同步任务再执行异步任务</code></strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">如何区分同步和异步：</span><br><span class="line">三种结构代码(顺序，分支，循环)一般为同步任务</span><br><span class="line">异步任务往往伴随着回调函数：事件绑定，定时器,延迟器，ajax</span><br><span class="line">举例：以单击为例，</span><br><span class="line">绑定事件是同步任务，先进行元素的事件的绑定，</span><br><span class="line">监听机制发现用户单击了按钮，会将回调函数放入到任务队列中，</span><br><span class="line">事件循环机制在执行栈中的同步任务都执行完之后，扫描任务队列 </span><br><span class="line">取出排在第一位的任务，推到主线程中执行，执行完之后，继续扫描...</span><br></pre></td></tr></table></figure><hr><h1 id="4-swiper-插件"><a href="#4-swiper-插件" class="headerlink" title="4,swiper 插件"></a><code>4,swiper 插件</code></h1><p><code>Swiper 是纯javascript打造的滑动特效插件，面向手机、平板电脑等移动终端。</code><br><code>Swiper插件是用来写轮播图的插件，十分简洁方便。可以直接去Swiper官网下载</code><br><strong><code>使用步骤：</code></strong></p><ol><li><code>下载资源</code></li><li><code>引入资源：js / css</code></li><li><code>添加必要的结构和样式</code></li><li><code>初始化</code></li></ol><hr><h1 id="5-本地存储"><a href="#5-本地存储" class="headerlink" title="5,本地存储"></a><code>5,本地存储</code></h1><p><strong><code>作用：实现数据持久化的本地操作</code></strong></p><div class="tabs" id="本地存储"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#本地存储-1">[localStorage]</button></li><li class="tab"><button type="button" data-href="#本地存储-2">[sessionStorage]</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="本地存储-1"><p><strong><code>localStorage</code></strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">`特性：`</span></span><br><span class="line"><span class="string">`存储在浏览器的物理空间中，`</span></span><br><span class="line"><span class="string">`理论上可以永久存储，除非你进行手动删除`</span></span><br><span class="line"><span class="string">`关闭浏览器，不会使本地存储消失`</span></span><br><span class="line"><span class="string">`同一个浏览器可以跨页面共享`</span></span><br><span class="line"><span class="string">`只能存储字符串格式的数据，且以键值对的形式存在`</span></span><br><span class="line"></span><br><span class="line"><span class="string">`使用语法：`</span></span><br><span class="line"><span class="string">`写入本地存储：localStorage.setItem(&#x27;键&#x27;,&#x27;值&#x27;)`</span></span><br><span class="line"><span class="string">`读取本地存储：localStorage.getItem(&#x27;键&#x27;)：获取当前键所对应的值,如果没有这个键，则返回null`</span></span><br><span class="line"><span class="string">`删除指定名称的本地存储：localStorage.removeItem(&#x27;键&#x27;):删除指定名称的本地存储：整个键值对都删除`</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">`存储细节`</span></span><br><span class="line"><span class="string">`本地存储只能存储字符串格式，如果你传递的数据不是字符串，那么它会自动将数据转换为字符串`</span></span><br><span class="line"><span class="string">`我们在存储的时候，应该手动将数据转换为我们所需要的格式再进行存储`</span></span><br><span class="line"></span><br><span class="line"><span class="string">`JSON.stringify(对象)：`</span></span><br><span class="line"><span class="string">`将对象转换为json格式的字符串`</span></span><br><span class="line"><span class="string">`使用场景：存储的时候使用`</span></span><br><span class="line"></span><br><span class="line"><span class="string">`JSON.parse(json字符串)：`</span></span><br><span class="line"><span class="string">`将json字符串转换为js对象`</span></span><br><span class="line"><span class="string">`使用场景：获取的时候使用`</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="本地存储-2"><p><strong><code>sessionStorage</code></strong><br><code>作用：缓存存储</code><br><code>特性：页面一关闭就会消失同一个浏览器也不能跨页面访问</code></p><p>使用方法：基本使用方式和localStorage一样：<br>setItem<br>getItem<br>removeItem</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><h1 id="6-json-目前主流"><a href="#6-json-目前主流" class="headerlink" title="6,json(目前主流)"></a><code>6,json(目前主流)</code></h1><p><code>全名:javascript object notation </code><br><strong><code>json是什么：js对象的标记，js对象的字符串形式,它是现在最流行的数据交换格式</code></strong></p><p><strong><code>语法：</code></strong><br><strong>扩展名为：json，</strong><br><code>文件中不能写注释</code><br><code>文件的最外层是[]代表数据是数组，是&#123;&#125;就代表数据是对象</code><br><code>键必须使用双引号包含，值如果是字符串也要使用双引号包含，数组和其它不用</code></p><hr><h1 id="7-属性操作"><a href="#7-属性操作" class="headerlink" title="7,属性操作"></a><code>7,属性操作</code></h1><p><code>有三种</code></p><div class="tabs" id="属性操作"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#属性操作-1">[通用属性]</button></li><li class="tab"><button type="button" data-href="#属性操作-2">[自有属性（内置）]</button></li><li class="tab"><button type="button" data-href="#属性操作-3">[自定义属性（h5新增）]</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="属性操作-1"><h2 id="通用属性"><a href="#通用属性" class="headerlink" title="通用属性"></a>通用属性</h2><ol><li>id：规定元素的唯一 id</li><li>class：规定元素的类名</li><li>style：规定元素的行内样式（inline style）</li><li>title：规定元素的额外信息（可在工具提示中显示）</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="属性操作-2"><h2 id="自有属性（内置）"><a href="#自有属性（内置）" class="headerlink" title="自有属性（内置）"></a>自有属性（内置）</h2><p>有一些HTML标准属性不是通用的而是某一些标签特有的</p><ol><li>a标签的href属性</li><li>img标签的src属性</li><li>form表单的action属性，method属性等</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="属性操作-3"><h2 id="自定义属性（h5新增）"><a href="#自定义属性（h5新增）" class="headerlink" title="自定义属性（h5新增）"></a>自定义属性（h5新增）</h2><p>HTML规范也允许我们自定义一些属性。（最新规范中，推荐以data-开头）<br>自定义属性的设置</p><ol><li>打点设置（不会在标签中显示）</li><li>setAttribute 设置（会显示在标签里）</li></ol><p>如何操作：<br>api：setAttribute  getAttributeremoveAttribute<br>data-   ：模板渲染设置和自定义属性通过 元素.dataset 获取，得到一个对象（ 常用）<br>状态值(checked)元素.属性</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p><img src="/../img/shuxin.png" alt="图示"></p><hr><h1 id="8-正则表达式"><a href="#8-正则表达式" class="headerlink" title="8,正则表达式"></a><code>8,正则表达式</code></h1><p><strong><code>基本理解：</code></strong><br> <code>使用语法：let ref = /正则表达式/</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">正则是对字符串的合法性进行校验，在正则看来所有内容都是字符串</span><br><span class="line">学习正则表达式就是学习它的元字符</span><br><span class="line"></span><br><span class="line">使用<span class="comment">//定义正则表达式： let ref = /正则表达式/</span></span><br><span class="line">校验方法： 正则表达式.<span class="title function_">test</span>(字符串)，返回<span class="literal">true</span>/<span class="literal">false</span></span><br></pre></td></tr></table></figure><p><strong><code>正则创建的建议</code></strong><br><code>先占位后修饰（注意：修饰不能单独存在）</code><br><code>从左到右写</code></p><div class="tabs" id="正则表达式"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#正则表达式-1">[边界符]</button></li><li class="tab"><button type="button" data-href="#正则表达式-2">[元字符]</button></li><li class="tab"><button type="button" data-href="#正则表达式-3">[修饰符--量词]</button></li><li class="tab"><button type="button" data-href="#正则表达式-4">[转义字符]</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="正则表达式-1"><h2 id="边界符："><a href="#边界符：" class="headerlink" title="边界符："></a>边界符：</h2><p><code>作用：限定匹配的字符的长度，进行精确匹配</code><br><code>    表现形式：  /^表达式$/</code><br><code>    ^:  以***开始</code><br><code>    $:  以***结束</code></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="正则表达式-2"><h2 id="元字符："><a href="#元字符：" class="headerlink" title="元字符："></a>元字符：</h2><p><strong><code>占位符：</code></strong><br><code>    一个指定类型的字符，可以是：</code><br><code>    数字</code><br><code>    大写字母</code><br><code>    小字字母</code><br><code>    下划线</code><br><code>    空字符</code><br><code>    其它字符</code></p><p><strong><code>语法：</code></strong><br><code>\d:代表一个数字： 0 1 2 3 4 5 6 7 8 9</code><br><code>\w:匹配一个合法字符，合法字符有：  0-9  a-z A-Z _</code><br><code>\s:匹配一个空字符，空字符是指看不见内容的字符，如  空格，制表位 ，换行符</code><br><code>\S：匹配一个非空字符</code><br><code>\D:代表一个非数字</code><br><code>\W：代表一个非法字符</code></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="正则表达式-3"><h2 id="修饰符–量词"><a href="#修饰符–量词" class="headerlink" title="修饰符–量词"></a>修饰符–量词</h2><p><code>作用：修饰前面的字符所出现的次数</code><br><code> *：修饰前面的字符出现任意次</code><br><code> ?:修饰前面的字符出现0次或1次</code><br><code> {n}:修饰前面的字符出现n次</code><br><code> {n,m}:修饰前面的字符最少出现n次，最多m次</code><br><code> {n,}:修饰前面的字符最少出现n次，最多 没有限制</code></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="正则表达式-4"><h2 id="转义字符："><a href="#转义字符：" class="headerlink" title="转义字符："></a>转义字符：</h2><p><code>语法：\</code><br><code>将元字符当成普通字符来处理</code></p><p><strong><code>改变优先级：用（）包起来</code></strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="常用方法："><a href="#常用方法：" class="headerlink" title="常用方法："></a>常用方法：</h2><p><code>test:进行匹配验证 ：侧重的是  是否匹配</code><br><strong><code>语法：regexp.test(str) </code></strong></p><p><strong>replace:替换</strong><br><code>是字符串的方法，只不过方法可以传递正则表达式做为参数</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str =<span class="number">23141241324123423112</span></span><br><span class="line"><span class="comment">// 将里面的1全部干掉---将1替换为</span></span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/1/g</span>    <span class="comment">// g全局，匹配所有</span></span><br><span class="line">str = str.<span class="title function_">replace</span>(reg,<span class="string">&quot;)</span></span><br><span class="line"><span class="string">// str = str.replaceAll(reg,&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str)</span><br></pre></td></tr></table></figure><p><code>g 表示全局匹配：匹配全部的内容</code></p><p><strong><code>语法：regexp.exec()</code></strong><br><code>exec:侧重的是匹配之后的字符串提取</code><br><code>调用这个方法如果成功返回一个数组，否则返回null</code><br><code>提取：如果想提取字符串，就将你想提取的字符串的正则表达式部分，使用()包含</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> email = wuhu0723@<span class="number">126.</span>com</span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/^(w[13)(w+)[@]((w+)[](\w+))$/</span></span><br><span class="line"><span class="keyword">let</span> obj = reg.<span class="title function_">exec</span>(email)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> -js内容 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -jsapi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js高级</title>
      <link href="/2022/11/23/js%E9%AB%98%E7%BA%A7/"/>
      <url>/2022/11/23/js%E9%AB%98%E7%BA%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="js高级"><a href="#js高级" class="headerlink" title="js高级"></a>js高级</h2>]]></content>
      
      
      <categories>
          
          <category> -js内容 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -jsa高级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js基础</title>
      <link href="/2022/11/23/js%E5%9F%BA%E7%A1%80/"/>
      <url>/2022/11/23/js%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<blockquote><h1 id="1-变量"><a href="#1-变量" class="headerlink" title="1. 变量"></a><code>1. 变量</code></h1></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">● 由字母(A-Z a-z)、数字(<span class="number">0</span>-<span class="number">9</span>)、下划线(_)、美元符号( $ ) 组成</span><br><span class="line">● 严格区分大小写</span><br><span class="line">● 不能以数字开头</span><br><span class="line">● 不能是关键字、保留字</span><br><span class="line">● 变量名必须有意义</span><br><span class="line">● 推荐使用驼峰命名法</span><br></pre></td></tr></table></figure><hr><blockquote><h1 id="2-数据类型"><a href="#2-数据类型" class="headerlink" title="2. 数据类型"></a><code>2. 数据类型</code></h1></blockquote><div class="tabs" id="两种数据类型"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#两种数据类型-1">[基本数据类型]</button></li><li class="tab"><button type="button" data-href="#两种数据类型-2">[引用数据类型]</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="两种数据类型-1"><h2 id="基本数据类型（简单数据类型）："><a href="#基本数据类型（简单数据类型）：" class="headerlink" title="基本数据类型（简单数据类型）："></a>基本数据类型（简单数据类型）：</h2><p><code>   Number （数值型）    NaN也是数值型的一种  NaN和任何值做比较都是false</code><br><code>   String （字符串型）  带“ ”或者 ‘ ’都是字符串类型</code><br><code>   Boolean (布尔型)    只有两个值：ture（真）  false （假）</code><br><code>   Undefined (未定义)  已声明，却未赋值的，就是undefined</code><br><code>   null （空）         未定义的也未声明的</code><br><code>   Symbol             （es6新增，表示独一无二的值）</code></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="两种数据类型-2"><h2 id="引用数据类型（复杂数据类型）："><a href="#引用数据类型（复杂数据类型）：" class="headerlink" title="引用数据类型（复杂数据类型）："></a>引用数据类型（复杂数据类型）：</h2><p><code>   Function    （函数）</code><br><code>   Object      （对象）</code><br><code>   Array       （数组）</code><br><code>   函数和数组是特殊的object类型（对象）</code></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="判断数据类型-type-of"><a href="#判断数据类型-type-of" class="headerlink" title="判断数据类型 (type of())"></a>判断数据类型 (type of())</h2><div class="tabs" id="判断数据类型"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#判断数据类型-1">[可以判断的数据类型]</button></li><li class="tab"><button type="button" data-href="#判断数据类型-2">[无法判断的数据类型]</button></li><li class="tab"><button type="button" data-href="#判断数据类型-3">[拓展]</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="判断数据类型-1"><h3 id="可以判断的数据类型："><a href="#可以判断的数据类型：" class="headerlink" title="可以判断的数据类型："></a>可以判断的数据类型：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">简单数据类型：Number  String  Boolean  Undefined</span><br><span class="line">引用数据类型：Function</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="判断数据类型-2"><h3 id="无法判断的数据类型"><a href="#无法判断的数据类型" class="headerlink" title="无法判断的数据类型"></a>无法判断的数据类型</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">简单数据类型：null（判断结果为Object）</span><br><span class="line">引用数据类型：Object Array（判断结果为Object）</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="判断数据类型-3"><h3 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">isNaN</span> 和 <span class="title class_">Number</span>.<span class="property">isNaN</span> 函数的区别？</span><br><span class="line"></span><br><span class="line">函数 <span class="title class_">Number</span>.<span class="property">isNaN</span> 会首先判断传入参数是否为数字</span><br><span class="line">如果是数字再继续判断是否为 <span class="title class_">NaN</span>，不会进行数据类型的转换</span><br><span class="line">这种方法对于 <span class="title class_">NaN</span> 的判断更为准确</span><br><span class="line"></span><br><span class="line"> 对于字符串blue，本质上我们是想判断传入的参数是否为<span class="title class_">NaN</span></span><br><span class="line"> 但是用 <span class="built_in">isNaN</span> 函数，判断结果为真 </span><br><span class="line"> 所以说 <span class="built_in">isNaN</span>函数判断 <span class="title class_">NaN</span> 不够准确。</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="built_in">isNaN</span>(<span class="string">&#x27;blue&#x27;</span>)); <span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">isNaN</span>(<span class="string">&#x27;blue&#x27;</span>)); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><blockquote><h1 id="3-变量类型的转换"><a href="#3-变量类型的转换" class="headerlink" title="3. 变量类型的转换"></a><code>3. 变量类型的转换</code></h1></blockquote><div class="tabs" id="两种数据类型"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#两种数据类型-1">[字符串型]</button></li><li class="tab"><button type="button" data-href="#两种数据类型-2">[数值型]</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="两种数据类型-1"><h2 id="字符串型："><a href="#字符串型：" class="headerlink" title="字符串型："></a>字符串型：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">变量 + &#x27; &#x27;   （推荐转换方法）</span><br><span class="line">变量.tostring</span><br><span class="line">String（变量）</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="两种数据类型-2"><h2 id="数值型："><a href="#数值型：" class="headerlink" title="数值型："></a>数值型：</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">parseint（变量） ：得到整数</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">parseint</span>(<span class="string">&#x27;156a&#x27;</span>)); <span class="comment">//结果为156</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">parseint</span>(<span class="string">&#x27;156.a&#x27;</span>)); <span class="comment">//结果为156</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">parseint</span>(<span class="string">&#x27;A156.a&#x27;</span>)); <span class="comment">//结果为NaN</span></span><br><span class="line">总结：要转换的值如果有非数字不会转换非数字，开头如果就是非数字则返回<span class="title class_">NaN</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">parseFloat</span>（变量） ：得到带浮点数的整数</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseFloat</span>(<span class="string">&#x27;1.15a&#x27;</span>)); <span class="comment">//结果为1.15</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseFloat</span>(<span class="string">&#x27;a1.15a&#x27;</span>)); <span class="comment">//结果为NaN</span></span><br><span class="line">总结：可以得到浮点数 开头数字非数字返回<span class="title class_">NaN</span> ，要转换的值如果有非数字不会转换非数字</span><br><span class="line"></span><br><span class="line"><span class="title class_">Number</span>（变量）</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>(<span class="string">&#x27;156a&#x27;</span>)); <span class="comment">//结果为NaN</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>(<span class="string">&#x27;156.1&#x27;</span>)); <span class="comment">//结果为156.1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>(<span class="string">&#x27;156&#x27;</span>)); <span class="comment">//结果为：156</span></span><br><span class="line">总结：可以得到整数和浮点数，只要带非数字就返回<span class="title class_">NaN</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">变量  -  *  / %运算（隐式转换）</span><br><span class="line">注意：+ 不能隐式转换，+如果两边值不一样，默认为拼接</span><br><span class="line">但可以这样写来转换：</span><br><span class="line">    <span class="keyword">let</span> a=<span class="number">10</span>,b=<span class="string">&#x27;20&#x27;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(c= +a + +b);</span><br><span class="line">c的结果为：<span class="number">30</span>  </span><br><span class="line"></span><br><span class="line">布尔型</span><br><span class="line"><span class="title class_">Boolean</span>（变量）</span><br><span class="line">转换 boolean 值为 <span class="literal">false</span> 的有： <span class="number">0</span>    ‘ ’    “ ”   <span class="literal">null</span>   <span class="literal">undefined</span>   <span class="title class_">NaN</span>，其他值转<span class="title class_">Boolean</span>都为ture</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><blockquote><h1 id="4-运算符"><a href="#4-运算符" class="headerlink" title="4. 运算符"></a><code>4. 运算符</code></h1></blockquote><div class="tabs" id="运算符"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#运算符-1">[+ - * / %]</button></li><li class="tab"><button type="button" data-href="#运算符-2">[赋值运算符]</button></li><li class="tab"><button type="button" data-href="#运算符-3">[一元运算符]</button></li><li class="tab"><button type="button" data-href="#运算符-4">[比较运算符]</button></li><li class="tab"><button type="button" data-href="#运算符-5">[逻辑运算符]</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="运算符-1"><h2 id="x2F"><a href="#x2F" class="headerlink" title="+ - * &#x2F; %"></a>+ - * &#x2F; %</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">加减乘除 及取余</span><br><span class="line">求余% ：使用场景，用于判断某个数是否可以被整除，运算后的结果一般是余数</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="运算符-2"><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">将右边的值赋给左边 要求左边是一个变量 比如：</span><br><span class="line">a=10</span><br><span class="line">值可以是： 任意类型  或表达式或函数调用,如果是表达式要先运行完表达式才赋值</span><br><span class="line"></span><br><span class="line">+=  ：相当于：变量=变量+值 </span><br><span class="line"> 如：a+=1        (a=a+1)</span><br><span class="line">同样，还有-=  %= /= *=</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="运算符-3"><h2 id="一元运算符"><a href="#一元运算符" class="headerlink" title="一元运算符"></a>一元运算符</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">++   --</span><br><span class="line">++或--在变量前面 比如 ++a/--a</span><br><span class="line">则表示先 自加/自减 再参与运算</span><br><span class="line"></span><br><span class="line">++或 -- 在变量后面 比如 a++/a--</span><br><span class="line">则表示先 参与运算 再进行自加/自减</span><br><span class="line">如果是单独写成一句，则两者没有区别 都是先使用再自加/自减</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="运算符-4"><h2 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&lt;&gt;=&lt;=======!==!=</span><br><span class="line">==  比较两边的 值 是否相等，可能会进行自动的类型转换</span><br><span class="line">=== 比较两边的 值和类型 是否都相等，并不会转变类型</span><br><span class="line">!=比较两边的值是否相等，可能会进行自动的类型转换</span><br><span class="line">!== 比较两边的 值和类型 是否不相等 并不会转变类型</span><br><span class="line">== ===  !==三者的返回值都为Boolean</span><br><span class="line"></span><br><span class="line">注意：数值比较大小，字符串比较ASCII码是否相等，结果返回的都是Boolean值</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="运算符-5"><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">与：&amp;&amp;</span><br><span class="line">或：||</span><br><span class="line">非：！</span><br><span class="line">结果都返回Boolean值</span><br><span class="line"></span><br><span class="line">条件拼接</span><br><span class="line">与：有一个条件不成立，那么就不成立，      全部成立才成立</span><br><span class="line">或：条件都不成立才不成立      有一个成立就成立</span><br><span class="line">非：取反  </span><br><span class="line">一般书写在流程语句中</span><br><span class="line"></span><br><span class="line">短路运算</span><br><span class="line">写在=号的右边&amp;&amp;如果第一个值为false就直接返回第一个值，否则返回第二个值</span><br><span class="line">||如果第一个值为ture就返回第一个值，否则返回第二个值</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><blockquote><h1 id="5-分支语句"><a href="#5-分支语句" class="headerlink" title="5.分支语句"></a><code>5.分支语句</code></h1></blockquote><div class="tabs" id="分支语句"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分支语句-1">[单分支]</button></li><li class="tab"><button type="button" data-href="#分支语句-2">[双分支]</button></li><li class="tab"><button type="button" data-href="#分支语句-3">[多分支]</button></li><li class="tab"><button type="button" data-href="#分支语句-4">[三元表达式（重点）]</button></li><li class="tab"><button type="button" data-href="#分支语句-5">[拓展]</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分支语句-1"><h2 id="单分支："><a href="#单分支：" class="headerlink" title="单分支："></a>单分支：</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">if</span>(boolean值做条件)&#123;</span><br><span class="line">    <span class="comment">//条件成立要进行的操作</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">获取<span class="title class_">Boolean</span>值的几种方式：</span><br><span class="line"><span class="number">1</span>，直接赋值ture或<span class="literal">false</span></span><br><span class="line"><span class="number">2</span>，关系运算符表达式--比较运算符</span><br><span class="line"><span class="number">3</span>，逻辑运算符--多条件</span><br><span class="line"><span class="number">4</span>，判断具体的变量值：在js中为<span class="literal">false</span>的值有：<span class="literal">undefined</span>  <span class="literal">null</span>  <span class="number">0</span>   <span class="string">&#x27; &#x27;</span>  <span class="string">&quot; &quot;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分支语句-2"><h2 id="双分支"><a href="#双分支" class="headerlink" title="双分支:"></a>双分支:</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件表达式)&#123;</span><br><span class="line"><span class="comment">//条件成立要进行的操作</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//条件不成立进行的操作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分支语句-3"><h2 id="多分支"><a href="#多分支" class="headerlink" title="多分支:"></a>多分支:</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件表达式)&#123;</span><br><span class="line"><span class="comment">//条件成立要进行的操作</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>（条件表达式）&#123;</span><br><span class="line"><span class="comment">//条件成立要进行的操作</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//上面条件都不成立要进行的操作</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//注：（else if 可以无限套娃哦）</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分支语句-4"><h2 id="三元表达式（重点）"><a href="#三元表达式（重点）" class="headerlink" title="三元表达式（重点）:"></a>三元表达式（重点）:</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//语法：    </span></span><br><span class="line">条件表达式 ？条件成立后的操作：不成立之后的操作</span><br><span class="line"><span class="comment">//条件表达式满足返回第一个值，不满足返回第二个值</span></span><br><span class="line"><span class="comment">//代码示例： </span></span><br><span class="line"><span class="keyword">let</span> a=<span class="number">10.</span>b=<span class="number">20</span></span><br><span class="line"><span class="keyword">let</span> demo= a &gt;= <span class="number">10</span> ? a : b</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(demo)</span><br><span class="line"><span class="comment">//demo结果为：10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//注：可以写在模板字符串中，可以嵌套  </span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分支语句-5"><h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="title class_">Switch</span>语句</span><br><span class="line">    <span class="comment">// switch case 语句与 if else 语句的多分支结构类似，</span></span><br><span class="line">    <span class="comment">// 都可以根据不同的条件来执行不同的代码；</span></span><br><span class="line">    <span class="comment">// 但是与 if else 多分支结构相比，</span></span><br><span class="line">    <span class="comment">// switch case 语句更加简洁和紧凑，执行效率更高。</span></span><br><span class="line">    <span class="comment">// 下面是他的格式</span></span><br><span class="line">        <span class="keyword">switch</span>(表达式)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="attr">value1</span>:</span><br><span class="line">         statements1 <span class="comment">// 当表达式的结果等于 value1 时，则执行该代码</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="attr">value2</span>:</span><br><span class="line">         statements2 <span class="comment">// 当表达式的结果等于 value2 时，则执行该代码</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        ......</span><br><span class="line">        <span class="keyword">case</span> <span class="attr">valueN</span>:</span><br><span class="line">         statementsN <span class="comment">// 当表达式的结果等于 valueN 时，则执行该代码</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        <span class="attr">default</span>:</span><br><span class="line">         statements <span class="comment">// 如果没有与表达式相同的值，则执行该代码</span></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><blockquote><h1 id="6-循环"><a href="#6-循环" class="headerlink" title="6.循环"></a><code>6.循环</code></h1></blockquote><div class="tabs" id="循环语句"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#循环语句-1">[while循环]</button></li><li class="tab"><button type="button" data-href="#循环语句-2">[拓展]</button></li><li class="tab"><button type="button" data-href="#循环语句-3">[for循环]</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="循环语句-1"><h2 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(条件表达式)｛</span><br><span class="line"><span class="comment">// 循环体</span></span><br><span class="line">｝</span><br><span class="line"><span class="comment">// 如果条件满足，就执行循环体，如果不满足就结束循环</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 循环有三要素</span></span><br><span class="line"><span class="comment">// 初始值，条件 初始变量的的变化</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="循环语句-2"><h3 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h3><p><code>其实还有一个do  while</code><br><code>do while 循环与 while 循环 非常相似</code><br><code>不同之处在于，do while 循环会先执行循环中的代码，然后再对条件表达式进行判断。</code><br><code>因此，无论条件表达式是真还是假，do while 循环都能至少执行一次</code><br><code>而 while 循环就不行了，如果条件表达式为假会直接退出 while 循环。</code></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="循环语句-3"><h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line"><span class="keyword">for</span>（初始值；循环条件；值的变化）&#123;</span><br><span class="line">    <span class="comment">// 要进行的操作（操作体）</span></span><br><span class="line">&#125;</span><br><span class="line">注意：分号不能少</span><br><span class="line"></span><br><span class="line">循环控制：<span class="keyword">continue</span>中止本次这一次循环操作，跳转到下一次循环操作</span><br><span class="line">         <span class="keyword">break</span>   中止当前循环--结束（跳出循环）</span><br><span class="line">                   可以进行循环嵌套</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><blockquote><h1 id="7-数组"><a href="#7-数组" class="headerlink" title="7.数组"></a><code>7.数组</code></h1><p><code>概念：可以存储多个值的一种数据类型，（是引用类型）</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">数组的创建：</span><br><span class="line"><span class="number">1.</span> 利用 <span class="keyword">new</span> 创建数组</span><br><span class="line"><span class="keyword">const</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>();</span><br><span class="line"><span class="number">2.</span> 利用数组字面量创建数组推荐</span><br><span class="line"><span class="keyword">const</span> arr = [ ];</span><br><span class="line">数组的元素获取我们可以通过下标来获取和操作</span><br><span class="line">语法为：数组[索引下标]</span><br><span class="line">注意：索引下标是从<span class="number">0</span>开始的</span><br><span class="line">数组遍历：  我们可以使用<span class="keyword">for</span>循环来做</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">数组操作：</span><br><span class="line"></span><br><span class="line">新增：push：在数组的最后追加元素语法：数组.<span class="property">push</span>（新元素）</span><br><span class="line">    unshift：在数组的最前面插入一个新元素语法：数组.<span class="property">unshift</span>（新元素）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">删除：</span><br><span class="line">移除最后一个元素： 数组.<span class="property">pop</span>（）</span><br><span class="line">删除第一个元素并返回第一个值：数组.<span class="property">shift</span>（）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">删除或插入或替换元素：数组.<span class="property">splice</span>（） 注意：这种方式会改变原始数组</span><br><span class="line">删除语法为：数组.<span class="property">splice</span>（起始位置，删除个数 ）如果没有传删除个数就删除起始位置后面的所有</span><br><span class="line">插入语法为：数组.<span class="property">splice</span>（起始位置，<span class="number">0</span>，插入的值）插入的值可以是多个</span><br><span class="line">替换语法为：数组.<span class="property">splice</span>（起始位置，要替换几个元素，替换的值）</span><br></pre></td></tr></table></figure><h3 id="拓展："><a href="#拓展：" class="headerlink" title="拓展："></a>拓展：</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">此外还有filter方法和map方法，这两个方法可以用来做遍历，我们一般用来做动态渲染</span><br><span class="line"></span><br><span class="line">filter () 方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素。 注意： filter () 不会对空数组进行检测。 </span><br><span class="line">注意： filter () 不会改变原始数组。</span><br><span class="line"></span><br><span class="line"><span class="title function_">map</span>() 方法返回一个新数组，数组中的元素为原始数组元素调用函数处理后的值。</span><br><span class="line"><span class="title function_">map</span>() 方法按照原始数组元素顺序依次处理元素。</span><br><span class="line">注意： <span class="title function_">map</span>() 不会对空数组进行检测。</span><br><span class="line">注意： <span class="title function_">map</span>() 不会改变原始数组</span><br></pre></td></tr></table></figure><h2 id="伪数组"><a href="#伪数组" class="headerlink" title="伪数组"></a>伪数组</h2><p><code> 并不是真正意义上的数组</code></p><ol><li><strong>具有数组的 length 属性</strong></li><li><strong>按照索引的方式进行存储的</strong></li><li><strong>它没有真正数组的一些方法 如pop()  push() 等等</strong></li></ol><hr><blockquote><h1 id="8-函数"><a href="#8-函数" class="headerlink" title="8.函数"></a><code>8.函数</code></h1><p><code>作用：将代码块封装起来，方便复用，还可以简化代码的结构</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">声明定义：</span><br><span class="line"><span class="keyword">function</span> 函数名称(形式参数列表：不是必须)&#123;</span><br><span class="line">            <span class="comment">// 函数体</span></span><br><span class="line">&#125;</span><br><span class="line">调用：函数名称（实际参数列表：不是必须）</span><br></pre></td></tr></table></figure><h2 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h2><h3 id="形参："><a href="#形参：" class="headerlink" title="形参："></a>形参：</h3><p><code>   可以定义多个，用逗号 ，隔开</code><br><code>    定义函数的时候，在（）写的就是形参</code><br><code>    声明定义的时候，形参只是参数占位</code><br><code>    在调用方法的时候，形参是一个变量</code><br><code>    相当于在方法中声明的局部变量，只有在方法内部可以使用，如果在方法外部使用，会报错</code></p><h3 id="实参："><a href="#实参：" class="headerlink" title="实参："></a>实参：</h3><p><code>    调用函数的时候，写在（）里面的就是实参</code><br><code>    实参是实际参数，是真正存在的值</code><br><code>    调用的时候，尽量让实参和形参：</code><br><code>    顺序对应：重点关注的问题，第一个实参为第一个形参赋值，依次累推</code><br><code>    数量对应：js本质是通过arguments来接收和处理参数，所以不传递或者传递更多参数语法是没有问题的</code><br><code>    类型对应：js是弱类型语言，不限制参数的类型</code></p><h3 id="函数的调用"><a href="#函数的调用" class="headerlink" title="函数的调用"></a>函数的调用</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">函数名称(实际参数列表：不是必须)</span><br><span class="line">调用函数的过程就是实参为形参赋值的过程</span><br><span class="line">只要在函数名称后面带有()就是调用函数，如果只有函数名称而没有（）就不是函数调用</span><br></pre></td></tr></table></figure><h3 id="函数的返回值"><a href="#函数的返回值" class="headerlink" title="函数的返回值"></a>函数的返回值</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">方法的本质功能是实现业务处理，但是不能对处理结果进行自定义的处理，一般是将结果返回</span><br><span class="line">return关键字可以实现返回值</span><br><span class="line">语法：return 一个变量</span><br><span class="line">注意：一个函数只能返回一个变量，如果有多个值需要返回，可以将多个值包装为对象，返回这一个对象，（也可以是包装为数组）</span><br><span class="line">return:可以中止函数，函数中运行到return后面的代码都不再执行</span><br><span class="line">一个函数中只有一个return可以被执行，先轮到谁就执行谁</span><br><span class="line"></span><br><span class="line">接收返回值</span><br><span class="line"></span><br><span class="line">调用的函数如果有返回值，可以定义一个变量用于接收这个函数的返回值</span><br><span class="line">函数返回了什么值，你就可以接收到什么值</span><br><span class="line">如果函数没有返回值，默认会返回undefined</span><br></pre></td></tr></table></figure><h3 id="arguments"><a href="#arguments" class="headerlink" title="arguments"></a>arguments</h3><p><code>只有函数才有 arguments 对象  而且是每个函数都内置好了这个arguments</code></p><hr><blockquote><h1 id="9-作用域"><a href="#9-作用域" class="headerlink" title="9.作用域"></a><code>9.作用域</code></h1><p>作用域一共有三种：</p></blockquote><ol><li><strong>全局作用域</strong></li><li><strong>函数作用域（局部）</strong></li><li><strong>块级作用域(es6新增)</strong><br><code>全局作用域：在script标签中声明的成员</code><br><code>函数作用域：局部作用域：在函数内部声明的成员</code><br><code>块级作用域：在｛｝中声明的成员</code></li></ol><h2 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h2><p><code>函数内部还可以创建函数，函数内部可以使用函数外部的成员，</code><br><code>当函数内部需要一个变量的时候，自己有就使用自己的，</code><br><code>如果没有就查找外部作用域，如果还没有， 再继续往外部找，</code><br><code>直到全局作用域，如果全局也没有，就报错</code></p><h2 id="拓展：-1"><a href="#拓展：-1" class="headerlink" title="拓展："></a>拓展：</h2><p><code>es6之前是没有块级作用域的，另外，es6之前我们声明变量是使用var，</code><br><code>let 和var的区别详解可点击此链接</code><br>[var和let的区别:] (‘<a href="https://blog.csdn.net/a1056244734/article/details/107150875&#39;">https://blog.csdn.net/a1056244734/article/details/107150875&#39;</a>)</p><hr><blockquote><h1 id="10-匿名函数"><a href="#10-匿名函数" class="headerlink" title="10.匿名函数"></a><code>10.匿名函数</code></h1><p><code>简单理解：没有名称的函数</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 语法</span></span><br><span class="line"><span class="keyword">let</span> fn = <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;</span><br></pre></td></tr></table></figure><p><strong>使用场景：</strong><br><code>回调参数：将函数做为函数的参数，那么传递的函数参数就称为回调函数</code><br><code>简单理解：回调函数就是「把函数作为参数传递给另一个函数，然后通过另一个函数来调用它。</code></p><hr><blockquote><h1 id="11-自调用函数"><a href="#11-自调用函数" class="headerlink" title="11.自调用函数"></a><code>11.自调用函数</code></h1></blockquote><h2 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h2><p><code>第一种理解：自执行即自动执行，也就是大家平时所谓的立即执行函数。</code><br><code>第二种理解：即自执行函数是在函数内部执行函数本身，即我们平时常说的递归函数</code></p><h2 id="特点：自动执行，"><a href="#特点：自动执行，" class="headerlink" title="特点：自动执行，"></a>特点：自动执行，</h2><p><code>注意事项：function前面带</code>  <strong>;</strong> 号</p><h2 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">一个函数在它的函数体内调用它自身称为递归调用，这种函数称为递归函数。</span><br><span class="line">执行递归函数将反复调用其自身，每调用一次就进入新的一层</span><br><span class="line">，当最内层的函数执行完毕后，再一层一层地由里到外退出。</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> -js内容 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -js基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nodejs</title>
      <link href="/2022/11/23/nodejs/"/>
      <url>/2022/11/23/nodejs/</url>
      
        <content type="html"><![CDATA[<h2 id="nodejs"><a href="#nodejs" class="headerlink" title="nodejs"></a>nodejs</h2>]]></content>
      
      
      <categories>
          
          <category> -nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -node.js </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
